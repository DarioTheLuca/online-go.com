/*
 * Copyright (C) 2012-2022  Online-Go.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import * as React from "react";

import * as rengo_utils from "rengo_utils";

import { errorAlerter } from "misc";
import { pgettext } from "translate";
import { del, get } from "requests";
import { useUser } from "hooks";
import { dup } from "misc";

import { popover } from "popover";
import { profanity_filter } from "profanity_filter";
import { challenge_text_description } from "ChallengeModal";

import { Card } from "material";
import { FabX } from "material";

import { ChallengeLinkButton } from "ChallengeLinkButton";
import { RengoManagementPane } from "RengoManagementPane";
import { RengoTeamManagementPane } from "RengoTeamManagementPane";

// We face two different challenge schemas because the challenge data we have is from the
// 'open invites' route, which is generated by serializers.py, in the same way as the direct
// challenges list in Challenges.tsx, but we are reusing `RengoManagementPane` from Play.tsx,
// which is fed from seekgraph - which does not user the serializers.
// An alternative would have been(would be ?) to add a new serializer that generates the seekgraph
// dto schema, but proliferating serializers is not attractive, and it would be a challenging task
// ... plus only a few of the fields  are actually needed here!

type ChallengeDTO = rest_api.OpenChallengeDTO;
type Challenge = socket_api.seekgraph_global.Challenge;

function challengeDtoToSeekgraphChallengeSubset(c: ChallengeDTO, user_id: number): Challenge {
    console.log(c);
    return {
        challenge_id: c.id,
        user_id: c.challenger.id, // number;
        username: c.challenger.username, // string;

        rengo_nominees: c.rengo_nominees, // number[], // array of player ids
        rengo_black_team: c.rengo_black_team, // number[], // array of player ids
        rengo_white_team: c.rengo_white_team, // number[], // array of player ids
        rengo_participants: c.rengo_participants, // number[], // array of player ids
        user_challenge: c.challenger.id === user_id,

        // These fields are not used by us, so we don't need to bother with them
        // (which is just as well, since many are not in ChallengeDTO)
        rank: null, // number;
        pro: null, // 0 | 1;
        min_rank: null, // number;
        max_rank: null, // number;
        game_id: null, // number;
        name: null, // string;
        ranked: null, // boolean;
        handicap: null, // number;
        komi: null, // number;
        rules: null, // import("../lib/types").RuleSet;
        width: null, // number;
        height: null, // number;
        challenger_color: null, // "black" | "white" | "automatic";
        disable_analysis: null, // true;
        time_control: null, // import("../components/TimeControl").TimeControlTypes.TimeControlSystem;
        time_control_parameters: null, // import("../components/TimeControl").TimeControl;
        time_per_move: null, // number;
        rengo: null, // boolean;
        rengo_casual_mode: null, // boolean;
        rengo_auto_start: null, // number;

        invite_only: null, // boolean;
        uuid: null, // string;
    };
}

export function InviteList(): JSX.Element {
    const [invites, setInvites] = React.useState<ChallengeDTO[]>([]);

    const manage_button = React.useRef();

    const deleteChallenge = (challenge) => {
        del("challenges/%%", challenge.id)
            .then(() => {
                setInvites(invites.filter((c) => c.id !== challenge.id));
            })
            .catch(errorAlerter);
    };

    const user = useUser();

    const showRengoManagementPane = (challenge: ChallengeDTO) => {
        const c = challengeDtoToSeekgraphChallengeSubset(challenge, user.id);
        popover({
            elt: (
                <RengoManagementPane
                    challenge_id={c.challenge_id}
                    user={user}
                    rengo_challenge_list={[c]}
                    startRengoChallenge={rengo_utils.startOwnRengoChallenge}
                    cancelChallenge={rengo_utils.cancelChallenge}
                    withdrawFromRengoChallenge={rengo_utils.unNominate}
                    joinRengoChallenge={rengo_utils.nominateForRengoChallenge}
                >
                    <RengoTeamManagementPane
                        user={user}
                        challenge_id={c.challenge_id}
                        challenge_list={[c]}
                        moderator={user.is_moderator}
                        show_chat={false}
                        assignToTeam={rengo_utils.assignToTeam}
                        kickRengoUser={rengo_utils.kickRengoUser}
                    />
                </RengoManagementPane>
            ),
            below: manage_button.current,
            animate: true,
            minWidth: 180,
            container_class: "rengo-management-pane-container",
        });
    };

    React.useEffect(
        () => {
            get("me/challenges/invites", { page_size: 30 })
                .then((res) => {
                    const invite_list = dup<ChallengeDTO[]>(res.results);
                    for (const challenge of invite_list) {
                        try {
                            challenge.game.time_control_parameters = JSON.parse(
                                challenge.game.time_control_parameters as string,
                            );
                        } catch (e) {
                            console.log(e);
                        }
                    }
                    setInvites(invite_list);
                })
                .catch((err) => {
                    console.error("Error receiving invite list:", err);
                });
        },
        [] /* run once */,
    );

    /* render */
    return (
        <div className="InviteList">
            {invites.length > 0 && (
                <h2>
                    {pgettext(
                        "The list of this person's current invite-only challenges",
                        "Your Open Invites",
                    )}
                </h2>
            )}
            <div className="challenge-cards">
                {invites.map((challenge) => {
                    return (
                        <Card key={challenge.id}>
                            <div className="name-and-buttons">
                                <div className="name">
                                    <h4>{profanity_filter(challenge.game.name)}</h4>
                                    <ChallengeLinkButton uuid={challenge.uuid} />
                                </div>
                                <div className="fab-section" ref={manage_button}>
                                    {(challenge.game.rengo && null) || (
                                        <button
                                            className="primary sm"
                                            onClick={() => showRengoManagementPane(challenge)}
                                        >
                                            {challenge.challenger.id === user.id
                                                ? pgettext(
                                                      "Manage rengo teams in a challenge",
                                                      "Manage",
                                                  )
                                                : pgettext(
                                                      "Look at rengo teams in a challenge",
                                                      "View",
                                                  )}
                                        </button>
                                    )}
                                    {(challenge.challenger.id === user.id || null) && (
                                        <FabX onClick={() => deleteChallenge(challenge)} />
                                    )}
                                </div>
                            </div>
                            <div>{challenge_text_description(challenge)}</div>
                        </Card>
                    );
                })}
            </div>
        </div>
    );
}
